# Computer Science II (COP 3503)

## Overview

Welcome to my **Computer Science II (COP 3503)** repository! This repository contains a collection of programming assignments that I completed as part of my coursework at the University of Central Florida (UCF). The course builds upon the foundations of Computer Science I, exploring advanced algorithmic techniques, technical algorithmic analysis, and new data structures.

Through these assignments, I developed proficiency in solving complex algorithmic problems and gained a deeper understanding of fundamental computer science concepts.

---

## Syllabus Highlights

### Topics Covered:
- **Algorithmic Techniques**:
  - Backtracking
  - Divide and Conquer
  - Dynamic Programming
  - Greedy Algorithms
- **Data Structures**:
  - Disjoint Sets
  - 2-4 Trees
  - Red-Black Trees
  - Skip Lists
- **Algorithmic Applications**:
  - Sorting (Radix, Bucket)
  - Graph Algorithms (DFS, BFS, Dijkstra, MST)
  - Network Flow

### Skills Gained:
- Implemented and analyzed algorithms to solve real-world problems.
- Mastered advanced data structures for efficient data manipulation.
- Gained experience in dynamic programming, backtracking, and graph traversal techniques.
- Solved competitive programming problems using **Kattis**.
- Enhanced problem-solving skills through algorithm design and optimization.

---

## Libraries and Technologies Used

### Libraries:
- **Java Standard Library**: For data structures and utilities (e.g., `HashMap`, `ArrayList`).
- **Custom Classes**: Implemented specialized classes like disjoint sets and graph structures for problem-specific solutions.

### Technologies:
- **Java**: The primary programming language used in this course.
- **Kattis**: A platform for solving competitive programming problems and honing algorithmic skills.

---

## Repository Contents

### Assignments

| File Name          | Description                                                                                           |
|--------------------|-------------------------------------------------------------------------------------------------------|
| `subseqsum.java`   | Solves the problem of finding the maximum sum of a "smooth" subsequence where adjacent values differ by at most `k`. Implements **dynamic programming** for efficiency. |
| `sga.java`         | Calculates the number of possible President/Vice-President pairs for an SGA election using **hashmaps**. |
| `gcdsum.java`      | Determines the maximum GCD sum for a list of integers split into segments using **dynamic programming**. |
| `hexagram.java`    | Solves a hexagram puzzle using **backtracking** and **pruning techniques** to find valid configurations. |
| `drones.java`      | Determines the minimum coordinated moves for drones to reach their groups in an 8x8 grid using **bit masking** and **BFS**. |
| `connect.java`     | Calculates the average connectivity of disjoint sets when queried, utilizing **disjoint set union** with path compression. |
| `codes.java`       | Matches codes to drugs using **network flow** (Dinic's algorithm) to ensure each drug has a unique code. |

---